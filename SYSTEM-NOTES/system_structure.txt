
Source files:
    SYSTEM.c - initializes all system elements and associated memory.
            Also frees everything and de-inits on close.
    
    CPU.c -

    MEMORY.c -

    VIDEO.c -

    AUDIO.c - 

Order of Operations:
1. SYSTEM.c
    main():
        calls LOAD_CONFIG() and SYSTEM_INIT(), then begins system processes
    
    SYSTEM_CONFIG():
        loads relevant information from config.json, passes back to main for init
   
    SYSTEM_INIT(cJSON*, pointers for CPU and MEM structs):
        calls init functions using config info

    SYSTEM_START(pointers to CPU and MEM structs):
        calls CPU_PWR_ON_RST(*CPU, *MEM)
        begins raylib window + graphics/system loop
        
        - Each "clock cycle": 
            Two parts: fetch information, operate on it appropriately
            FETCH:
                -Read value at $(PC)
                -Decode hex value of fetched opcode to determine instruction and addressing mode
                -Total fetch cycles depend on addressing mode
                    Accumulator:    2 cycles
                    Immed:          2 cycles
                    Impl:           2 cycles

                    Rel:            2 cycles (3 cycles if crosses page boundary)

                    ZP, ZP X/Y:     3/4 cycles

                    Abs, abs X/Y:   4 cycles

                    Ind:            5 cycles

                    Ind X/Y:        6 cycles
            EXECUTE:
                -Call function pointer of associated instruction, passing the data and addressing mode
        
        - After EXECUTE returns, increment PC and being loop again.



2. CPU.c
    Custom Types:
        BYTE: uint8_t
        WORD: uint16_t



    *** CPU Structure "CPU" *** {

        

    }

    CPU_PWR_ON_RST(*CPU, *MEM):
        performs standard 6502 startup sequence